!------------------------------------------------------------------------------
!
! This file is part of the SternheimerGW code.
!
! Copyright (C) 2010 - 2018
! Henry Lambert, Martin Schlipf, and Feliciano Giustino
!
! SternheimerGW is free software: you can redistribute it and/or modify
! it under the terms of the GNU General Public License as published by
! the Free Software Foundation, either version 3 of the License, or
! (at your option) any later version.
!
! SternheimerGW is distributed in the hope that it will be useful,
! but WITHOUT ANY WARRANTY; without even the implied warranty of
! MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
! GNU General Public License for more details.
!
! You should have received a copy of the GNU General Public License
! along with SternheimerGW. If not, see
! http://www.gnu.org/licenses/gpl.html .
!
!------------------------------------------------------------------------------
!> This module provides the routines to set up the linear problem from input.
MODULE test_linear_solver_module

  USE kinds, ONLY: dp

  IMPLICIT NONE

  !> the linear operator
  COMPLEX(dp), ALLOCATABLE :: AA(:,:)

CONTAINS

  !> Read the shifted linear problem written by the debug routine
  !!
  !! The linear problem is defined by
  !! \f{equation}{
  !!   (A - \sigma I) x = b
  !! \f}
  !! with the idea to solve the shifted systems in the same step as
  !! the unshifted one.
  !! @note the linear operator is store as a module variable
  SUBROUTINE linear_problem_read(filename, sigma, bb, xx)

    USE iotk_module, ONLY: iotk_free_unit, iotk_scan_dat, &
                           iotk_open_read, iotk_close_read

    !> the filename from which the data is read
    CHARACTER(*), INTENT(IN) :: filename

    !> the unit of the file
    INTEGER iunit

    !> dimension of the linear problem
    INTEGER vec_size

    !> number of shifts in the file
    INTEGER num_shift

    !> the shifts of the linear problem
    COMPLEX(dp), INTENT(OUT), ALLOCATABLE :: sigma(:)

    !> the right hand side of the equation
    COMPLEX(dp), INTENT(OUT), ALLOCATABLE :: bb(:)

    !> the incorrect solution of the problem we want to test
    COMPLEX(dp), INTENT(OUT), ALLOCATABLE :: xx(:,:)

    ! abort if AA is already allocated
    IF (ALLOCATED(AA)) CALL errore(__FILE__, "you may only treat one linear problem at a time -> deallocate AA", 1)

    !
    ! read the data from the given file
    !
    CALL iotk_free_unit(iunit)
    CALL iotk_open_read(iunit, filename, binary = .TRUE.)
    !
    ! read dimension
    CALL iotk_scan_dat(iunit, 'DIMENSION', vec_size)
    CALL iotk_scan_dat(iunit, 'NUMBER_SHIFT', num_shift)
    !
    ! create arrays to contain the data of the file
    ALLOCATE(sigma(num_shift))
    ALLOCATE(AA(vec_size, vec_size))
    ALLOCATE(bb(vec_size))
    ALLOCATE(xx(vec_size, num_shift))
    !
    ! read the linear problem (A + sigma I) x = b
    CALL iotk_scan_dat(iunit, 'LIST_SHIFT', sigma)
    CALL iotk_scan_dat(iunit, 'LINEAR_OPERATOR', AA)
    CALL iotk_scan_dat(iunit, 'RIGHT_HAND_SIDE', bb)
    CALL iotk_scan_dat(iunit, 'INCORRECT_SOLUTION', xx)
    !
    CALL iotk_close_read(iunit)

  END SUBROUTINE linear_problem_read

  !> Evaluate \f$(A - \sigma I) x\f$.
  SUBROUTINE linear_problem_apply(sigma, xx, Ax)

    !> The shift of this system.
    COMPLEX(dp), INTENT(IN)  :: sigma

    !> The input vector.
    COMPLEX(dp), INTENT(IN)  :: xx(:)

    !> The operator applied to the vector.
    COMPLEX(dp), INTENT(OUT) :: Ax(:)

    Ax = MATMUL(AA, xx) + sigma * xx

  END SUBROUTINE linear_problem_apply

  !> deallocate the linear operator
  SUBROUTINE linear_problem_reset()

    IF (ALLOCATED(AA)) DEALLOCATE(AA)

  END SUBROUTINE linear_problem_reset

  !
  ! test if the BiCGstab linear solver works
  !
  @test
  SUBROUTINE test_bicgstab

    USE bicgstab_module,       ONLY: bicgstab, bicgstab_type
    USE debug_module,          ONLY: test_nan
    USE kinds,                 ONLY: dp
    USE pfunit_mod

    IMPLICIT NONE

    ! name of the file that is tested
    CHARACTER(*), PARAMETER :: filename = 'lin_prob.xml'

    ! the parts of the linear problem
    COMPLEX(dp), ALLOCATABLE :: bb(:), xx(:,:), sigma(:)

    ! the solution of the linear problem
    COMPLEX(dp), ALLOCATABLE :: solution(:,:)

    ! a work array to test the solution
    COMPLEX(dp), ALLOCATABLE :: work(:)

    ! flag indicates if the file exists
    LOGICAL lexist

    ! range of l values to be tested
    INTEGER, PARAMETER :: lmin = 1, lmax = 15

    ! counter on the l value
    INTEGER ll

    ! dimension of the problem
    INTEGER vec_size

    ! number of shifts
    INTEGER num_shift

    ! counter on the shifts
    INTEGER ishift

    ! error flag returned by the solver
    INTEGER ierr

    ! threshold for convergence
    REAL(dp), PARAMETER :: threshold = 1e-6_dp

    ! the residual error
    REAL(dp) residual

    ! configuration of the bicgstab solver
    TYPE(bicgstab_type) config

    !> LAPACK function to evaluate the 2-norm
    REAL(dp), EXTERNAL :: DNRM2

    ! abort if the file does not exist
    INQUIRE(FILE = filename, EXIST = lexist)
    IF (.NOT.lexist) THEN
      CALL errore(__FILE__, 'file ' // filename // ' not found', 1)
      RETURN
    END IF

    ! read the linear problem (note: A is stored in module)
    CALL linear_problem_read(filename, sigma, bb, xx)

    vec_size = SIZE(bb)
    num_shift = SIZE(sigma)
    ALLOCATE(work(vec_size))

    !
    ! test the solver without multishift
    !
    ALLOCATE(solution(vec_size, 1))
    !
    DO ll = lmin, lmax
      !
      DO ishift = 1, num_shift
        !
        config%threshold = threshold
        config%lmax = ll
        CALL bicgstab(config, linear_problem_apply, bb, sigma(ishift:ishift), solution, ierr)
        !
        ! check error flag not set
        @assertTrue(ierr == 0)
        ! sanity check: no NaN
        @assertFalse(ANY(test_nan(solution)))
        !
        ! check if |(A + sigma I) x - b| < threshold
        CALL linear_problem_apply(sigma(ishift), solution(:, 1), work)
        work = work - bb
        residual = DNRM2(2 * vec_size, work, 1)
        @assertEqual(0.0_dp, residual, threshold)
        !
      END DO ! ishift
      !
    END DO ! ll
    !
    DEALLOCATE(solution)

    !
    ! test the solver with multishift
    !
    ALLOCATE(solution(vec_size, num_shift))
    !
    DO ll = lmin, lmax
      !
      config%threshold = threshold
      config%lmax = ll
      CALL bicgstab(config, linear_problem_apply, bb, sigma, solution, ierr)
      !
      ! check error flag not set
      @assertTrue(ierr == 0)
      ! sanity check: no NaN
      @assertFalse(ANY(test_nan(solution)))
      !
      ! check if |(A + sigma I) x - b| < threshold
      DO ishift = 1, num_shift
        !
        CALL linear_problem_apply(sigma(ishift), solution(:, ishift), work)
        work = work - bb
        residual = DNRM2(2 * vec_size, work, 1)
        !
        ! we allow for same order of magnitude, because the shifted systems might converge slower
        @assertEqual(0.0_dp, residual, 10.0_dp * threshold)
        !
      END DO ! ishift
      !
    END DO ! ll
    !
    DEALLOCATE(solution)

    ! reset the linear problem
    CALL linear_problem_reset()

  END SUBROUTINE test_bicgstab

  !
  ! test if the linear solver works
  !
  @test
  SUBROUTINE test_linear_solver

    USE kinds,                 ONLY: dp
    USE linear_solver_module,  ONLY: linear_solver, linear_solver_config
    USE pfunit_mod

    IMPLICIT NONE

    ! linear solver configuration
    TYPE(linear_solver_config) config

    ! norm of the vector b
    REAL(dp) norm

    ! residual error of the linear problem
    REAL(dp) residual

    ! the parts of the linear problem
    COMPLEX(dp), ALLOCATABLE :: bb(:), xx(:,:), sigma(:), work(:)

    ! name of the file that is tested
    CHARACTER(*), PARAMETER :: filename = 'lin_prob.xml'

    ! dimensionality of the problem
    INTEGER vec_size

    ! counter on the shifts
    INTEGER ishift

    ! error flag returned by the solver
    INTEGER ierr

    ! flag indicates if the file exists
    LOGICAL lexist

    !> LAPACK function to evaluate the 2-norm
    REAL(dp), EXTERNAL :: DNRM2

    ! abort if the file does not exist
    INQUIRE(FILE = filename, EXIST = lexist)
    IF (.NOT.lexist) THEN
      CALL errore(__FILE__, 'file ' // filename // ' not found', 1)
      RETURN
    END IF

    ! read the linear problem (note: A is stored in module)
    CALL linear_problem_read(filename, sigma, bb, xx)

    ! solve the linear problem with default configuration
    CALL linear_solver(config, linear_problem_apply, bb, sigma, xx, ierr)

    ! error flag must not be set
    @assertTrue(ierr == 0)

    !
    ! check if (A + sigma I) x = b
    !
    ALLOCATE(work(SIZE(bb)))
    ! note - factor 2 for complex
    vec_size = 2 * SIZE(bb)
    DO ishift = 1, SIZE(sigma)

      ! evaluate (A + sigma I) x - b (should vanish)
      CALL linear_problem_apply(sigma(ishift), xx(:,ishift), work)
      work = work - bb

      ! evaluate |b|
      norm = DNRM2(vec_size, bb, 1)

      ! evaluate relative residual error
      residual = DNRM2(vec_size, work, 1) / norm

      ! residual error should be smaller than convergence threshold
      @assertEqual(0.0_dp, residual, config%threshold)

    END DO ! ishift

    ! reset the linear problem
    CALL linear_problem_reset()

  END SUBROUTINE test_linear_solver

END MODULE test_linear_solver_module
