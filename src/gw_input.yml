#------------------------------------------------------------------------------
#
# This file is part of the SternheimerGW code.
# 
# Copyright (C) 2010 - 2017
# Henry Lambert, Martin Schlipf, and Feliciano Giustino
#
# SternheimerGW is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# SternheimerGW is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with SternheimerGW. If not, see
# http://www.gnu.org/licenses/gpl.html .
#
#------------------------------------------------------------------------------ 
#
# This file documents the input variables for the SternheimerGW code.
#
# The format of this file is 
# namelist_name:
#   variable_name:
#     type: real, logical, character, ...
#     default: specifies the default value of the variable
#     description: This should decribe the use of the variable to a user
#
# You must NOT use the same name for a variable (even if they are in different
# namelists)
#
#------------------------------------------------------------------------------ 
gw_input:

  # a title describing the calculation

  title:
    type: character(len=256)
    default: 'SternheimerGW'
    description: The title allows to print a small description what this calculation
      does and is reprinted to the output.

  # variables necessary to extract the results of the PW calculation

  prefix:
    type: character(len=256)
    default: 'pwscf'
    description: Use the prefix variable of the PW calculation.

  outdir:
    type: character(len=256)
    default: './'
    description: Use the outdir variable of the PW calculation.

  # general configuration of the GW calculation

  kpt_grid:
    type: integer, dimension(3)
    default: [0, 0, 0]
    description: The grid used to integrate the density reponse needed for the
      screened Coulomb interaction. If not set, defaults to the grid used in the
      scf calculation.

  qpt_grid:
    type: integer, dimension(3)
    default: [0, 0, 0]
    description: The grid used to integrate the screened Coulomb and the exchange
      contribution to the self energy.

  truncation:
    type: character(len=80)
    default: 'on'
    description: Specifies which method is used to truncate the Coulomb potential.
      Possible options are\n
      * not using any truncation 'none', 'off', 'false', 'no', 'no truncation'\n
      * using a spherical truncation 'on', 'true', 'yes', 'spherical', 'spherical truncation'\n
      * using a film geometry truncation (expects film in x-y plane)
        'film', 'film truncation', '2d', '2d truncation' \n
      * spherical truncation using the QE coulomb_vcut module 'vcut spherical',
        'vcut spherical truncation', 'spherical vcut', 'spherical truncation vcut' \n
      * Wigner-Seitz truncation using the QE coulomb_vcut module 'wigner-seitz', 'wigner-seitz
        truncation', 'ws', 'ws truncation'

  num_band:
    type: integer
    default: 0
    description: Number of bands for which the GW correction is evaluated. Note that it
      has to be larger than the number of occupied states so that the Fermi energy can
      be calculated.

  # configuration of the screened Coulomb interaction

  do_coul:
    type: logical
    default: .TRUE.
    description: Specify whether the screened Coulomb interaction is calculated

  solve_coul:
    type: character(len=256)
    default: 'direct'
    description: Specify which method is used to solve for the screened Coulomb interaction\n
      * 'direct' determine the dielectric function and invert\n
      * 'iter' or 'iterative' to determine the inverse of the dielectric function iteratively
        which requires no matrix inversion and hence less memory

  nmix_coul:
    type: integer
    default: 4
    description: Number of potentials that are mixed in the iterative solver.

  use_symm_coul:
    type: logical
    default: .TRUE.
    description: Use the small group of q to reduce the amount of G vectors for which the
      linear response is calculated.

  thres_coul:
    type: real(dp)
    default: 1e-4_dp
    description: The threshold to which the linear solver is converged. For the iterative solver
      smaller values are necessary (~1e-8).

  max_iter_coul:
    type: integer
    default: 1000
    description: The maximum number of iterations a linear solver will try before aborting.

  model_coul:
    type: character(len=256)
    default: 'pade'
    description: Model used to perform the analytic continuation from the coarse mesh, on which
      the linear solver works, onto the dense mesh, where the integration is performed.
      Possible choices\n
        * 'gn', 'pp', or 'godby-needs', Godby-Needs plasmon pole model\n
        * 'pade', Pade approximation\n
        * 'pade robust', robust method to determine Pade approximant, requires the initial
          frequency mesh to be on a circle

  max_freq_coul:
    type: real(dp)
    default: 100.0_dp
    description: Upper boundary of the frequency integration grid when convoluting G and W.

  num_freq_coul:
    type: integer
    default: 50
    description: Number of frequency points in the integration grid when convoluting G and W.
